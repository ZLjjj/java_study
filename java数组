静态初始化 {1, 2, 3}：
int[] arr = {1, 2, 3};
栈内存：变量 arr 存储一个引用（地址），指向堆中的数组对象。
堆内存：数组对象 [1, 2, 3] 被分配在堆中。


动态初始化 new int[3]：
int[] arr = new int[3]; // 初始化为 [0, 0, 0]
栈内存：变量 arr 存储一个引用，指向堆中的数组对象。
堆内存：数组对象 [0, 0, 0] 被分配在堆中。

为什么数组对象必须存在堆中？
对象生命周期：
栈内存的生命周期与方法的调用周期一致，方法结束后栈帧被销毁。如果数组对象存储在栈中，当方法退出时数组会被销毁，这不符合 Java 的设计（对象可以跨方法传递或长期存活）。
堆内存允许对象在方法调用结束后仍然存在（直到被垃圾回收）。
动态分配：
数组的长度可能在运行时动态确定（例如通过 new int[n]），无法在编译时确定栈内存大小。
引用语义：
Java 中数组是引用类型，遵循“引用-对象”分离的模型，所有引用类型的实例必须存储在堆中。
